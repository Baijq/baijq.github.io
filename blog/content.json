{"meta":{"title":"BiuBiu","subtitle":"记录、学习、生活","description":"诗酒趁年华","author":"biubiu","url":"https://baijq.github.io","root":"/"},"pages":[{"title":"关于我","date":"2021-08-09T13:08:08.000Z","updated":"2021-08-09T14:58:22.291Z","comments":true,"path":"about/index.html","permalink":"https://baijq.github.io/about/index.html","excerpt":"","text":"BiuBiu:（让坚持成为品质，让优秀成为习惯）一个初入江湖的95后搬砖小伙。出生于甘肃某个宁静的的小山村。喜欢有趣的事情，有趣的人。喜欢优美的文字。喜欢简单，恬静。文笔不好，希望借博客锻炼一哈！ 本站分享内容 IT相关技术分享，分享是一种博爱的心境，学会分享，就学会了生活。 工具使用心得分享 生活趣事 偶尔写写文章，练练手 联系方式E-Mail：&#98;&#97;&#x69;&#x6a;&#113;&#109;&#97;&#x69;&#x6c;&#x40;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;"},{"title":"分类","date":"2021-08-09T13:08:08.000Z","updated":"2021-08-12T14:47:46.300Z","comments":true,"path":"categories/index.html","permalink":"https://baijq.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-08-09T13:16:36.000Z","updated":"2021-08-12T14:46:23.883Z","comments":true,"path":"tags/index.html","permalink":"https://baijq.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java日志体系-Logback","slug":"Java日志体系-Logback","date":"2021-09-27T13:18:59.000Z","updated":"2021-09-27T13:19:50.905Z","comments":true,"path":"2021/09/27/Java日志体系-Logback/","link":"","permalink":"https://baijq.github.io/2021/09/27/Java%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB-Logback/","excerpt":"日志这个是一个系统重要的组成部分，不论任何系统，都会有详细的日志记录。日志对于查询问题有着至关重要的作用","text":"日志这个是一个系统重要的组成部分，不论任何系统，都会有详细的日志记录。日志对于查询问题有着至关重要的作用 背景历史那么这个日志说起来有点故事，，在学校学习的时候，都是使用下面这俩 System.out.println() System.err.println()做一些必要信息的记录的 哈哈哈，虽然是很low但是你别说，还真管用嘞 哈哈哈 随着学习的深入和工作了，开始对这个日志有了一定的了解….. 以前的写法固然可以达到效果，但是在实际的开发中，难免会出现问题，比如上线了，日志比较多，，System.out.println输出的不会长久保留，会顶掉了，，日后查问题页看不到日志…. 接下来，高能时刻….让我装一下,,在下等这一刻很久了，biubiu 有位穿着格子衫，牛仔裤，运动hai的大佬 就开发了一款专门记录日志的框架 log4j 极大的解决了日志记录问题，在当时备受关注，确实很好用，非常流行，使用的人也越来越多 于是这小伙子想着能不能 开源了这个玩意儿。于是乎，在某天早晨，这个大佬兴致勃勃的就先找了jdk官方，想让jdk里原生支持下log4j，谁曾想，着tm的jdk不以为然，估计还傲娇的看不起小伙子，这位大佬碰壁后骑着小破车就回去了… 越想越气，过了几天，他其上心爱的小摩托，去了 apache, 但是看门大爷看到他衣衫褴褛，不让他进去…. 淦，啊这。。。还好，遇到了老板的大儿子tomcat,没错，就是你熟悉的那只tomcat..他看那小伙子很顺眼，，就打他去见了apache爸爸 apache二话不说，就同意了他的请求，于是乎 log4j 就成了apache的开源项目 jdk知道后，这能忍？？于是乎自己开发了一个JUL 再后来，一个项目由多个小组开发，各用各的日志框架，，最后合并代码的时候出问题了，，于是乎，日志门面 出来了 什么是日志门面，就是提供统一的接口，并且做相应的适配器，转换器！可以把不同的日志实现转化为统一的 日志框架分类 日志门面 JCL Slf4j 日志实现 Log4j JCL LogBack Log4j2 ….. 当jdk推出JCL之后，那个小伙子觉得apache不给力，人家都推出了日志门面，apache这一点动静页没有…于是乎就离开了 然后自己开发了一个日志门面 Slf4j 性能是十分好 再后来，由于系统对性能的要求越来越严格，log4j性能不行，，小伙子又开发了一个全新框架 logback，非常流行，，springboot默认页使用了logback 日志实现框架log4j：几乎不用了jul：小型的项目可以用用logback：非常流行，性能很好 springboot默认采用log4j2：非常流行，性能很好 日志门面jcl：spring默认采用 JCL，全称为”Jakarta Commons Logging”，也可称为”Apache Commons Logging”。slf4j：springboot默认采用 推荐组合slf4j + logback (Springboot默认使用的)slf4j + log4j2 logback 配置方式一，通过application.yml简单配置因为springboot默认是logback,所以通过springboot的application.yml里可以配置最基础的日志相关的信息：如下 官方文档 新建一个项目springboot-log-demo，就引入web 123456789101112131415@SpringBootApplicationpublic class LogApplication &#123; private static final Logger log = LoggerFactory.getLogger(LogApplication.class); public static void main(String[] args) &#123; SpringApplication.run(LogApplication.class, args); log.trace(&quot;---- this is TRACE level-----&quot;); log.debug(&quot;---- this is DEBUG level-----&quot;); log.info(&quot;---- this is INFO level-----&quot;); log.warn(&quot;---- this is WARN level-----&quot;); log.error(&quot;---- this is ERROR level-----&quot;); &#125;&#125; springboot默认的日志级别是INFO，高于INFO的日志才会打印，如下图，我们的TRACE/DEBUG都没打印 自定义日志的级别 dev环境 com.biubiu.log包下面我们打印trace级别的日志application-dev.yml 123logging: level: com.biubiu.log: trace logging.file.name把日志存到文件中application-dev.yml 123456logging: level: com.biubiu.log: trace file: #name: biubiu-log.log name: D:\\logs\\biubiu-log.log 方式二，通过logback配置文件配置日志 命名官方推荐使用的xml名字的格式为：logback-spring.xml而不是logback.xml，至于为什么，因为带spring后缀的可以使用这个标签 位置在resource下创建logback-spring.xml文件 详细配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--根节点&lt;configuration&gt;包含三个属性: scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时， 此属性生效。默认的时间间隔为1分钟。 debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 这里配置的10秒钟检测一次配置文件--&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;10 seconds&quot;&gt; &lt;!-- 子节点&lt;contextName&gt;:用来设置上下文名称：每个logger都关联到logger上下文，默认上下文名称为“default”。 但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称 --&gt; &lt;contextName&gt;logback&lt;/contextName&gt; &lt;!-- 子节点&lt;property&gt;设置变量，类似于maven的property。用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称， value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt; &lt;property name=&quot;log.path&quot; value=&quot;./log&quot;/&gt; &lt;!-- 彩色日志 --&gt; &lt;!-- 彩色日志依赖的渲染类 --&gt; &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot; /&gt; &lt;conversionRule conversionWord=&quot;wex&quot; converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; /&gt; &lt;conversionRule conversionWord=&quot;wEx&quot; converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; /&gt; &lt;!-- 日志输出格式： %-5level 日志级别 %d&#123;yyyy-MM-dd HH:mm:ss&#125; 日期 %c 或者%logger类的完整名称 %M method方法名 %L 行号 %thread 线程名 %m或者%msg 日志信息 %n 换行 --&gt; &lt;!-- 彩色日志格式 --&gt; &lt;property name=&quot;CONSOLE_LOG_PATTERN&quot; value=&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;/&gt; &lt;!-- 子节点&lt;appender&gt;:appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略， 常用就是控制台输出策略和文件输出策略。 --&gt; &lt;!--输出到控制台--&gt; &lt;appender name=&quot;CONSOLE&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt; &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &lt;level&gt;debug&lt;/level&gt; &lt;/filter&gt; &lt;encoder&gt; &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;/Pattern&gt; &lt;!-- 设置字符集 --&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--日志记录到文件--&gt; &lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt; &lt;appender name=&quot;DEBUG_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 正在记录的日志文件的路径及文件名 --&gt; &lt;file&gt;$&#123;log.path&#125;/log_debug.log&lt;/file&gt; &lt;!--日志文件输出格式--&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 设置字符集 --&gt; &lt;/encoder&gt; &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!-- 日志归档 --&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/debug/log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!--日志文件保留天数--&gt; &lt;maxHistory&gt;15&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 此日志文件只记录debug级别的 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;debug&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 时间滚动输出 level为 INFO 日志 --&gt; &lt;appender name=&quot;INFO_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 正在记录的日志文件的路径及文件名 --&gt; &lt;file&gt;$&#123;log.path&#125;/log_info.log&lt;/file&gt; &lt;!--日志文件输出格式--&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;!-- 每天日志归档路径以及格式 --&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!--日志文件保留天数--&gt; &lt;maxHistory&gt;15&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 此日志文件只记录info级别的 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;info&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 时间滚动输出 level为 WARN 日志 --&gt; &lt;appender name=&quot;WARN_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 正在记录的日志文件的路径及文件名 --&gt; &lt;file&gt;$&#123;log.path&#125;/log_warn.log&lt;/file&gt; &lt;!--日志文件输出格式--&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt; &lt;/encoder&gt; &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!--日志文件保留天数--&gt; &lt;maxHistory&gt;15&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 此日志文件只记录warn级别的 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;warn&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt; &lt;appender name=&quot;ERROR_FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 正在记录的日志文件的路径及文件名 --&gt; &lt;file&gt;$&#123;log.path&#125;/log_error.log&lt;/file&gt; &lt;!--日志文件输出格式--&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集 --&gt; &lt;/encoder&gt; &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!--日志文件保留天数--&gt; &lt;maxHistory&gt;15&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!-- 此日志文件只记录ERROR级别的 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;level&gt;error&lt;/level&gt; &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt; &lt;onMismatch&gt;DENY&lt;/onMismatch&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 子节点&lt;logger&gt;:用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt; 有三个属性： - name:用来指定受此logger约束的某一个包或者具体的某一个类 - level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF - addtivity:是否向上级logger传递打印信息。默认是true。 --&gt; &lt;!--使用mybatis的时候，sql语句只有在 debug 级别下才会打印--&gt; &lt;!--&lt;logger name=&quot;com.biubiu.mybatis.mapper&quot; level=&quot;debug&quot; /&gt;--&gt; &lt;!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 不能设置为INHERITED或者同义词NULL。默认是DEBUG 可以包含零个或多个元素，标识这个appender将会添加到这个logger。 --&gt; &lt;root level=&quot;INFO&quot;&gt; &lt;/root&gt; &lt;!--开发环境:打印控制台--&gt; &lt;springProfile name=&quot;dev&quot;&gt; &lt;logger name=&quot;com.biubiu.log&quot; level=&quot;debug&quot;&gt; &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt; &lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt; &lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt; &lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt; &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt; &lt;/logger&gt; &lt;/springProfile&gt; &lt;!--生产环境:输出到文件--&gt; &lt;!--&lt;springProfile name=&quot;pro&quot;&gt; &lt;root level=&quot;warn&quot;&gt; &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt; &lt;appender-ref ref=&quot;DEBUG_FILE&quot; /&gt; &lt;appender-ref ref=&quot;INFO_FILE&quot; /&gt; &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt; &lt;appender-ref ref=&quot;WARN_FILE&quot; /&gt; &lt;/root&gt; &lt;/springProfile&gt;--&gt;&lt;/configuration&gt;","categories":[{"name":"Logback","slug":"Logback","permalink":"https://baijq.github.io/categories/Logback/"}],"tags":[{"name":"Java后端","slug":"Java后端","permalink":"https://baijq.github.io/tags/Java%E5%90%8E%E7%AB%AF/"}]},{"title":"Java基础（一）","slug":"Java基础（一）","date":"2021-09-04T12:59:17.000Z","updated":"2021-09-04T13:03:22.249Z","comments":true,"path":"2021/09/04/Java基础（一）/","link":"","permalink":"https://baijq.github.io/2021/09/04/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"Java是一门面向对象的高级编程语言，本篇说基础","text":"Java是一门面向对象的高级编程语言，本篇说基础 Java集合Java集合类存放于 java.util 包中，是一个用来存放对象的容器。 介绍本文内容参考自返回主页YSOcean Java 集合详解 集合只能存放对象。比如你存一个 int 型数据 1放入集合中，其实它是自动转换成 Integer 类后存入的，Java中每一种基本类型都有对应的引用类型集合存放的是多个对象的引用，对象本身还是放在堆内存中集合可以存放不同类型，不限数量的数据类型。 两大类 Map：键值对 Collection：单值 List Set List下最常用的集合：有序，可重复ArrayList：底层数据结构是数组，查询快，增删慢 线程不安全，效率高LinkedList：底层数据结构是链表，查询慢，增删快 线程不安全，效率高Vector：底层数据结构是数组，查询快，增删慢 线程安全，效率低 Set下最常用的集合：无序，唯一HashSet：底层数据结构是哈希表 无序，唯一 如何来保证元素唯一性? 如何来保证元素唯一性? 依赖两个方法：hashCode()和equals()TreeSet：底层数据结构是红黑树。(唯一，有序) 如何保证元素排序的呢? 自然排序 比较器排序LinkedHashSet：底层数据结构是链表和哈希表 (FIFO插入有序,唯一) 由链表保证元素有序 由哈希表保证元素唯一 TreeSet的主要功能用于排序LinkedHashSet的主要功能用于保证FIFO即有序的集合(先进先出)HashSet只是通用的存储数据的集合 注意：每一个存储到 哈希 表中的对象，都得提供 hashCode() 和 equals() 方法的实现，用来判断是否是同一个对象对于 HashSet 集合，我们要保证如果两个对象通过 equals() 方法返回 true，这两个对象的 hashCode 值也应该相同。 Map下有：HashMap：线程不安全 效率高 K V都允许Null, K不允许重复HashTable：线程安全（synchronized）效率低 不允许Null 打死都不用LinkedHashMap：有序TreeMap：有序 JVMJava 内存模型,方法区,堆,栈交互模型 堆内存模型","categories":[{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://baijq.github.io/tags/Java/"}]},{"title":"Docker基础（一）","slug":"Docker基础（一）","date":"2021-08-11T03:39:52.000Z","updated":"2021-08-31T12:41:42.840Z","comments":true,"path":"2021/08/11/Docker基础（一）/","link":"","permalink":"https://baijq.github.io/2021/08/11/Docker%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"Docker是开源的应用容器引擎，Docker改变了虚拟化的方式！","text":"Docker是开源的应用容器引擎，Docker改变了虚拟化的方式！ 写在前面：本篇参考 柠乐博客 三大概念 镜像：就像安装包一样的东西 容器：Docker通过安装镜像生成的一个环境，就像应用多开一样，开启的应用环境一样的东西 仓库：应用市场一样的东西 安装docker在Ubuntu或者deepin里都可以采用一条命令安装 123456# 安装apt install docker.io`# 启动docker服务systemctl start docker# 查看是否成功docker version 常用命令1.帮助信息 123docker version # 版本信息docker info # 系统信息docker 命令 --help # 帮助命令 2.镜像命令 1234docker images # 查看主机上的镜像docker search nginx # 搜索镜像docker pull nginx # 下载镜像docker rmi nginx # 删除镜像 3.容器命令 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960##1.运行容器docker run --name 容器名 -i -t -p 主机端口:容器端口 -d -v 主机目录:容器目录:ro ImageId或者镜像名:TAG# --name 指定容器名称# -i 以交互模式运行容器# -t 分配一个伪终端，通常 -it组合# -p 指定映射端口，将主机端口映射到容器端口# -d 后台运行# -v 指定挂载主机目录到容器目录，默认为rw读写模式，ro表示只读##2.查看容器docker ps -a -q# docker ps 查看正在运行的容器# -a 查看所有容器（包括未运行的）# -q 只查看容器的ID##3.停止容器docker stop 容器ID或容器名##4.强制停止容器docker kill 容器ID##5.移除容器docker rm -f 容器ID或容器名# -f 表示强制删除##6.查看日志docker logs 容器ID或容器名##7.进入正在运行容器docker exec -it 容器ID或容器名 bash# 进入正在运行的容器并且开启交互模式终端# bash是固有写法，也可以只写 /bin/bash##8.容器中搜索文件whereis nginx #找到nginx位置##9.退出容器exit #容器直接退出ctrl +P +Q #容器不停止退出 ---注意：这个很有用的操作##10.拷贝文件docker cp 主机文件路径 容器ID或容器名:容器路径 #主机中文件拷贝到容器中docker cp 容器ID或容器名:容器路径 主机文件路径 #容器中文件拷贝到主机中##11.查看容器中进程信息psdocker top 容器id##12.获取容器元信息docker inspect 容器ID或容器名 Nginx小练习123456789101112131415161718192021222324252627282930313233#1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档docker search nginx#2. 拉取下载镜像 pulldocker pull nginx#3. 查看是否下载成功镜像docker images#3. 运行测试# -d 后台运行# --name 给容器命名# -p 宿主机端口：容器内部端口docker run -d --name nginx01 -p 3344:80 nginx#4. 查看正在启动的镜像docker ps#5. 进入容器docker exec -it nginx01 /bin/bash#6.找到nginx位置whereis nginx # nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx#7. 退出容器exit#8. 停止容器docker stop aa664b0c8ed9#9. 删除容器docker rm nginx01 Tomcat小练习1234567891011121314151617181920212223242526272829#下载 最新版docker pull tomcat#查看下载的镜像docker images#以后台方式，暴露端口方式，启动运行docker run -d -p 8080:8080 --name tomcat01 tomcat#测试访问有没有问题curl localhost:8080#根据容器id进入tomcat容器docker exec -it 645596565d3f /bin/bash#查看tomcat容器内部内容：root@645596565d3f:/usr/local/tomcat# ls -l#进入webapps目录# 发现问题：1、linux命令少了。 2.webapps目录为空 # 为了保证最小可运行的环境，其他都删了！# 解决方案：# 将webapps.dist下的文件都拷贝到webapps下即可cp -r webapps.dist/* webapps # 拷贝webapps.dist 内容给webapps#再次访问验证curl localhost:8080","categories":[{"name":"Docker","slug":"Docker","permalink":"https://baijq.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://baijq.github.io/tags/Docker/"}]},{"title":"《将进酒》-李白 欣赏","slug":"《将进酒》-李白 欣赏","date":"2021-08-11T03:39:52.000Z","updated":"2021-08-15T11:15:35.784Z","comments":true,"path":"2021/08/11/《将进酒》-李白 欣赏/","link":"","permalink":"https://baijq.github.io/2021/08/11/%E3%80%8A%E5%B0%86%E8%BF%9B%E9%85%92%E3%80%8B-%E6%9D%8E%E7%99%BD%20%E6%AC%A3%E8%B5%8F/","excerpt":"将（qiāng）进酒，是我非常喜欢的一首古诗！记得小时候老师要求全文背诵。哈哈哈&#x1f31a; 当时好像因为字太多背不下来……！到了后来，竟然不知不觉就能默写并背诵全文了。当能背诵默写下来的时候，我也就慢慢的理解了诗篇的意思，也慢慢读懂了李白大佬的心思……","text":"将（qiāng）进酒，是我非常喜欢的一首古诗！记得小时候老师要求全文背诵。哈哈哈&#x1f31a; 当时好像因为字太多背不下来……！到了后来，竟然不知不觉就能默写并背诵全文了。当能背诵默写下来的时候，我也就慢慢的理解了诗篇的意思，也慢慢读懂了李白大佬的心思…… 原文《将进酒》 李白 君不见黄河之水天上来，奔流到海不复回。君不见高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我才必有用，千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。岑夫子，丹丘生，将进酒，杯莫停。与君歌一曲，请君为我倾耳听。钟鼓馔玉不足贵，但愿长醉不复醒。古来圣贤皆寂寞，惟有饮者留其名。陈王昔时晏平乐，斗酒十千恣欢谑。主人何为言少钱，径须沽取对君酌。五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。 我非常喜欢这首诗里面的几句，尤其是天生我才必有用，千金散尽还复来这句。李白感叹上地既然造就了他的才干，必然有其作用，即使有再多的金钱全部散尽了，也会重新再来！这里，让我想起德国伟大哲学家黑格尔也说过一句话，大意是存在即合理！ 我们现实中也是如此，做任何事情的时候，即使失败，也不要灰心，不要绝望，要更加坚强！ 郭达“上头陕西话”朗诵 &#x1f602;&#x1f602;","categories":[{"name":"古诗词系列","slug":"古诗词系列","permalink":"https://baijq.github.io/categories/%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"古诗词","slug":"古诗词","permalink":"https://baijq.github.io/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"}]},{"title":"SpringBoot系列（三）-RestFul-API Swagger 统一接口返回 全局异常处理","slug":"SpringBoot系列（三）-RestFul-API","date":"2021-08-11T03:39:52.000Z","updated":"2021-09-04T13:06:15.022Z","comments":true,"path":"2021/08/11/SpringBoot系列（三）-RestFul-API/","link":"","permalink":"https://baijq.github.io/2021/08/11/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89-RestFul-API/","excerpt":"随着前后端分离的发展，各端分工越来越精细化，前后端耦合性大大降低，后端接口需要文档，统一格式返回等等，今天一一分析分析……","text":"随着前后端分离的发展，各端分工越来越精细化，前后端耦合性大大降低，后端接口需要文档，统一格式返回等等，今天一一分析分析…… 准备新建一个项目，springboot-restful-api-demo 引入web模块。 统一接口返回前后端分离：前端负责数据的展示，后端负责数据的处理，前后端交互变得非常重要！ 前后端分离架构： 1234567前端：iOS Android 小程序 web m 等等 调用接口（Http）后端：Nginx （负载均衡，流量分发，静态资源处理，反向代理等等）后端：聚合服务后端：微服务（分布式部署的各种服务） 处理数据后端：DB,Redis,MongoDB,MQ等 一套系统适应多端（iOS App, Android App, 小程序，m站，pc站等），所以API最好返回统一的数据格式 如下模板，code-状态码 message-消息提示，错误消息等 data-真正的数据 12345678&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;OK&quot;, &quot;data&quot;: &#123; &quot;memo&quot;: &quot;&quot;, &quot;dataState&quot;: 1 &#125;&#125; 开始撸起来，响应实体Result 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.biubiu.api.vo;import lombok.Getter;import java.io.Serializable;/** * &lt;p&gt; * Result * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */@Getterpublic class Result&lt;T&gt; implements Serializable &#123; private static final long serialVersionUID = 7491166533026088331L; private int code; private String message; private T data; public Result() &#123; &#125; private Result(int code, String message, T data) &#123; this.code = code; this.message = message; this.data = data; &#125; public static &lt;T&gt; Result&lt;T&gt; success(T data) &#123; return new Result&lt;&gt;(200, &quot;ok&quot;, data); &#125; public static &lt;T&gt; Result&lt;T&gt; success() &#123; return success(null); &#125; public static &lt;T&gt; Result&lt;T&gt; error(ResultCode resultCode) &#123; return error(resultCode.getCode(), resultCode.getMessage()); &#125; public static &lt;T&gt; Result&lt;T&gt; error(int code, String message) &#123; return new Result&lt;&gt;(code, message, null); &#125; public static &lt;T&gt; Result&lt;T&gt; error(String message) &#123; return error(-1, message); &#125; public static &lt;T&gt; Result&lt;T&gt; error() &#123; return error(&quot;error&quot;); &#125;&#125; 统一错误状态码ResultCode 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.biubiu.api.vo;/** * &lt;p&gt; * ResultCode * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */public enum ResultCode &#123; //异常声明 SUCCESS(0, &quot;ok&quot;), ERROR(-1, &quot;error&quot;), //参数异常 ERROR_SYSTEM_EXCEPTION(1001, &quot;系统异常&quot;), ERROR_PARAM_IS_BLANK(1002, &quot;参数为空&quot;), ERROR_PARAM_TYPE_BIND_ERROR(1003, &quot;参数类形错误&quot;), //用户异常 ERROR_USER_NOT_LOGGED_IN(104001, &quot;用户未登录，需要验证，请登录&quot;), ERROR_USER_LOGIN_ERROR(104002, &quot;账号不存在或密码错误&quot;), ERROR_USER_NOT_EXIST(104003, &quot;用户不存在&quot;), ERROR_USER_HAS_EXISTED(104004, &quot;用户已存在&quot;);//末尾分号，勿删 private final int code; private final String message; ResultCode(Integer code, String message) &#123; this.code = code; this.message = message; &#125; public int getCode() &#123; return this.code; &#125; public String getMessage() &#123; return this.message; &#125;&#125; 测试 DemoController 1234567891011121314151617181920212223242526272829303132333435363738package com.biubiu.api.controller;import com.biubiu.api.vo.Result;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.Map;/** * &lt;p&gt; * DemoController * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */@RestController@RequestMapping(&quot;/api&quot;)public class DemoController &#123; @RequestMapping(&quot;/demo&quot;) public Result&lt;Map&lt;String, Object&gt;&gt; demo() &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(&quot;name&quot;, &quot;张三&quot;); map.put(&quot;id&quot;, 10001); map.put(&quot;hobby&quot;, new ArrayList&lt;&gt;(Arrays.asList(&quot;篮球&quot;, &quot;网球&quot;))); map.put(&quot;city&quot;, &quot;上海&quot;); return Result.success(map); &#125; @RequestMapping(&quot;/test&quot;) public Result&lt;String&gt; demos() &#123; return Result.success(&quot;测字符串&quot;); &#125;&#125; ] 全局异常处理 自定义异常 1234567891011121314151617package com.biubiu.api.handler;/** * &lt;p&gt; * SystemException * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */public class SystemException extends RuntimeException &#123; private static final long serialVersionUID = 1488902735359521074L; public SystemException(String message) &#123; super(message); &#125;&#125; 全局异常捕获 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.biubiu.api.handler;import com.biubiu.api.vo.Result;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.validation.BindException;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RestControllerAdvice;import javax.servlet.http.HttpServletRequest;/** * &lt;p&gt; * GlobalExceptionHandler * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */@RestControllerAdvicepublic class GlobalExceptionHandler &#123; private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class); @ExceptionHandler(Exception.class) public Result&lt;Object&gt; exceptionHandler(Exception ex, HttpServletRequest request) &#123; log.error(&quot;url:&#123;&#125;,|errMsg:&#123;&#125;&quot;, request.getRequestURI(), ex.getMessage(), ex); return Result.error(500, ex.getMessage()); &#125; /** * 参数校验异常捕获 */ @ExceptionHandler(BindException.class) public Result&lt;Object&gt; bindExceptionHandler(BindException ex, HttpServletRequest request) &#123; log.error(&quot;url:&#123;&#125;,|errMsg:&#123;&#125;&quot;, request.getRequestURI(), ex.getBindingResult().getFieldError().getDefaultMessage(), ex); return Result.error(500, ex.getBindingResult().getFieldError().getDefaultMessage()); &#125; /** * 参数校验异常捕获 */ @ExceptionHandler(MethodArgumentNotValidException.class) public Result&lt;Object&gt; methodArgumentNotValidExceptionHandler(MethodArgumentNotValidException ex, HttpServletRequest request) &#123; log.error(&quot;url:&#123;&#125;,|errMsg:&#123;&#125;&quot;, request.getRequestURI(), ex.getBindingResult().getFieldError().getDefaultMessage(), ex); return Result.error(500, ex.getBindingResult().getFieldError().getDefaultMessage()); &#125; /** * 自定义异常 */ @ExceptionHandler(SystemException.class) public Result&lt;Object&gt; methodArgumentNotValidExceptionHandler(SystemException ex, HttpServletRequest request) &#123; log.error(&quot;url:&#123;&#125;,|errMsg:&#123;&#125;&quot;, request.getRequestURI(), ex.getMessage(), ex); return Result.error(500, ex.getMessage()); &#125;&#125; 测试 1234567891011121314151617181920212223242526272829303132333435/** * &lt;p&gt; * DemoController * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/23 */@RestController@RequestMapping(&quot;/api&quot;)public class DemoController &#123; @RequestMapping(&quot;/e1&quot;) public Result&lt;String&gt; e1() &#123; throw new SystemException(&quot;错误测试&quot;); &#125; @RequestMapping(&quot;/e2&quot;) public Result&lt;String&gt; e2(@Valid User user) &#123; return Result.success(&quot;Hello &quot; + user.getName()); &#125; @RequestMapping(&quot;/e3&quot;) public Result&lt;String&gt; e3() &#123; int i = 3 / 0; return Result.success(&quot;ok&quot;); &#125;&#125;@Dataclass User &#123; private int id; @NotBlank(message = &quot;名字不为空&quot;) private String name;&#125; 返回结果 123456789101112131415&#123; &quot;code&quot;: 500, &quot;message&quot;: &quot;错误测试&quot;, &quot;data&quot;: null&#125;&#123; &quot;code&quot;: 500, &quot;message&quot;: &quot;名字不为空&quot;, &quot;data&quot;: null&#125;&#123; &quot;code&quot;: 500, &quot;message&quot;: &quot;/ by zero&quot;, &quot;data&quot;: null&#125; 备注：上面有个 @Valid 注解，这是参数校验用的，使用的是Hibernate Validator处理的，下面来说 参数校验 参数校验Hibernate Validator是SpringBoot内置的校验框架，只要集成了SpringBoot就自动集成了它，就可以在对象上面使用它提供的注解来完成参数校验。 由于SpringBoot 2.3版本默认移除了校验功能，如果想要开启的话需要添加如下依赖。 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&lt;/dependency&gt; 常用注解 @NotNull：被注释的属性不能为null； @NotBlank：被注释的字符串不能为空字符串； @NotEmpty：被注释的属性不能为空； @Pattern：被注释的属性必须符合其regexp所定义的正则表达式； @Email：被注释的属性必须符合邮箱格式。 @Min：被注释的属性必须大于等于其value值； @Max：被注释的属性必须小于等于其value值； @Size：被注释的属性必须在其min和max值之间； RestFul-API随着互联网和移动设备得发展，人们对Web应用的使用需求也增加，传统的动态页面由于低效率而渐渐被HTML+JavaScript(Ajax)的前后端分离所取代！所以一套结构清晰、符合标准、易于理解、扩展方便让大部分人都能够理解接受的接口风格就显得越来越重要，而RESTful风格的接口(RESTful API)刚好有以上特点，就逐渐被实践应用而变得流行起来 用URL定位资源，用Http请求描述操作 HTTP请求 GET 从服务器取出资源（一项或多项） POST 在服务器新建一个资源 PUT 在服务器更新资源（客户端提供完整资源数据） PATCH 在服务器更新资源（客户端提供需要修改的资源数据） DELETE 从服务器删除资源 URL: 统一资源定位符HTTP/1.1: 引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive 加入了管道机制，在同一个TCP连接里，允许多个请求同时发送，增加了并发性，进一步改善了HTTP协议的效率 新增了请求方式PUT、PATCH、OPTIONS、DELETE等 状态码 200 OK - 客户端请求成功 [GET] 201 CREATED 用户新建或修改数据成功 [POST/PUT/PATCH] 202 Accepted 表示一个请求已经进入后台排队（异步任务） 204 Accepted 用户删除数据成功 [DELETE] 301 - 资源（网页等）被永久转移到其它URL 302 - 临时跳转 400 Bad Request - 客户端请求有语法错误，不能被服务器所理解 [POST/PUT/PATCH] 401 Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 表示用户没有权限（令牌、用户名、密码错误） 403 表示用户得到授权（与401错误相对），但是访问是被禁止 404 NOT FOUND - 请求资源不存在，可能是输入了错误的URL 500 - 服务器内部发生了不可预期的错误 503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。 RestFul和非RestFul比较 API name 非 RestFul RestFul 获取dog /dogs/query/{dogid} GET /dogs/{dogid} 插入dog /dogs/add POST /dogs 更新dog /dogs/update/{dogid} PUT /dogs/{dogid} 删除dog /dogs/delete/{dogid} DELETE /dogs/{dogid} 示例Controller 12345678910111213141516171819202122232425262728293031323334353637@RestControllerpublic class MyRestController &#123; @Resource private UserLoginService userLoginService; @GetMapping(&quot;/users&quot;) public List&lt;UserLogin&gt; queryAll() &#123; return userLoginService.queryAll(); &#125; @GetMapping(&quot;/users/&#123;id&#125;&quot;) public UserLogin queryById(@PathVariable(&quot;id&quot;) Integer id) &#123; return userLoginService.queryById(id); &#125; @PostMapping(&quot;/users&quot;) public int add(UserLogin userLogin) &#123; return userLoginService.add(userLogin); &#125; @PutMapping(&quot;/users/&#123;id&#125;&quot;) public int update(@PathVariable(&quot;id&quot;) Integer id, @RequestParam(&quot;username&quot;) String username, @RequestParam(&quot;password&quot;) String password) &#123; UserLogin user = userLoginService.queryById(id); user.setUsername(username); user.setPassword(password); return userLoginService.update(user); &#125; @DeleteMapping(&quot;/users/&#123;id&#125;&quot;) public int delete(@PathVariable(&quot;id&quot;) Integer id) &#123; return userLoginService.deletebyId(id); &#125;&#125; ] Swagger 引入依赖 12345678910111213141516171819&lt;!-- swagger 2.9.2 &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;--&gt;&lt;!--swagger3--&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt; 配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.biubiu.common.config;import io.swagger.annotations.ApiOperation;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.oas.annotations.EnableOpenApi;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;/** * Swagger API文档配置类 * * @author biubiu * @date 2020/11/27 23:59 */@Configuration@EnableOpenApipublic class Swagger3Config &#123; @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.OAS_30) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); //.globalOperationParameters(headerParameter());//全局配置 &#125; private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title(&quot;Swagger3 API 文档标题&quot;) .description(&quot;API 文档描述&quot;) .contact(new Contact(&quot;biubiu&quot;, &quot;https://www.yuque.com/biubiu-note&quot;, &quot;baijqmail@163.com&quot;)) .version(&quot;1.0.0&quot;) .build(); &#125; private List&lt;Parameter&gt; headerParameter() &#123; ParameterBuilder cityen = new ParameterBuilder(); cityen.name(&quot;cityen&quot;).description(&quot;城市简写：sz,tj&quot;).modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build(); ParameterBuilder platform = new ParameterBuilder(); platform.name(&quot;platform&quot;).description(&quot;平台：ios,android,wap,wechat&quot;).modelRef(new ModelRef(&quot;string&quot;)).parameterType(&quot;header&quot;).required(false).build(); pars.add(cityen.build()); pars.add(version.build()); return pars; &#125;&#125; 访问Swagger3http://ip:port/swagger-ui/ 常用注解 注解 描述 @Api 标记一个Controller类做为swagger文档资源 @ApiOperation 用在Controller里的方法上 @ApiModel 标记实体对象 @ApiModelProperty 标记实体对象属性 @ApiParam 用于Controller中方法的参数说明，单个参数 @ApiIgnore 用来屏蔽某些接口或参数，使其不在页面上显示 遇到的问题错误描述 写完Result之后就基于测试，没注意检查，当我访问测试接口 http://localhost:8080/api/demo 的时候报错，状态码406，如下图 ] ] 然后看看控制台,,我尼玛，这啥问题呀 123456782021-08-23 11:53:37.097 INFO 14532 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;2021-08-23 11:53:37.528 INFO 14532 --- [ main] com.biubiu.api.RestFulApplication : Started RestFulApplication in 3.801 seconds (JVM running for 5.205)2021-08-23 11:53:46.718 INFO 14532 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;2021-08-23 11:53:46.718 INFO 14532 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet &#x27;dispatcherServlet&#x27;2021-08-23 11:53:46.719 INFO 14532 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 1 ms2021-08-23 11:53:46.776 WARN 14532 --- [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation]2021-08-23 11:53:50.096 WARN 14532 --- [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation]2021-08-23 11:53:53.173 WARN 14532 --- [nio-8080-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: Could not find acceptable representation] 接着百度了下，杂七乱八的，有说包不全的，需要导入jsckson的，有说需要加context-type的，然鹅。。我这里都不管用。。。 于是乎，就仔细检查了下代码，，此时已经一万只草泥马在奔腾，原来是Result返回类少写了Getter。。。mdzz!!哎。。。一言难尽就。不说了，赶紧加上就可以了 1234@Getter//就这个，一定要认值public class Result&lt;T&gt; implements Serializable &#123;&#125; 总结分析一下吧，加深印象。。其实是给自己找点面子 &#x1f602; 这里必须提到 @ResponseBody 注解，是将controller的方法返回的对象 通过适当的转换器 转换为指定的格式之后，写入到response对象的body区（响应体中），通常用来返回JSON数据 该注解用于将Controller的方法返回的对象，通过适当的 HttpMessageConverter 转换为指定格式后，写入到Response对象的body数据区 转换的时候会用到Getter方法，就报错了","categories":[{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://baijq.github.io/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://baijq.github.io/tags/SpringBoot/"}]},{"title":"SpringBoot系列（四）-多数据源切换","slug":"SpringBoot系列（四）-多数据源切换","date":"2021-08-11T03:39:52.000Z","updated":"2021-09-27T13:18:15.971Z","comments":true,"path":"2021/08/11/SpringBoot系列（四）-多数据源切换/","link":"","permalink":"https://baijq.github.io/2021/08/11/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/","excerpt":"我们在项目中，有时候会碰到多个数据源切换的场景，这里从零开始说一下步骤！！也是做一个笔记备忘。","text":"我们在项目中，有时候会碰到多个数据源切换的场景，这里从零开始说一下步骤！！也是做一个笔记备忘。 准备工作事先准备好一个能走通curd的springboot+mybatis的web项目,我的结构如下图 基本代码和之前一样，我这里贴一下 新建两个库 biubiu(主) 和 biubiu_slave(从)，新建一个tb_user表 123456789101112131415161718192021222324252627SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for tb_user-- ----------------------------DROP TABLE IF EXISTS `tb_user`;CREATE TABLE `tb_user` ( `user_id` int(0) NOT NULL DEFAULT 0 COMMENT &#x27;主键ID&#x27;, `name` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;, `nickname` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;, `age` int(0) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;, `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;, `phone` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;电话&#x27;, `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;地址&#x27;, `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;, `created_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;, `updated_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of tb_user-- ----------------------------INSERT INTO `tb_user` VALUES (10002, &#x27;马云01&#x27;, &#x27;风清扬&#x27;, 18, &#x27;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp1.pccoo.cn%2Fbbs%2F20140321%2F201403211527527664.jpg&amp;refer=http%3A%2F%2Fp1.pccoo.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1630075084&amp;t=c59a1eb4f7fa54dae7b7c79afae05395&#x27;, &#x27;15566886688&#x27;, &#x27;浙江省杭州市&#x27;, &#x27;1964年9月10日生于浙江省杭州市，祖籍浙江省嵊州市谷来镇， 阿里巴巴集团主要创始人&#x27;, &#x27;2021-07-28 22:38:49&#x27;, NULL);INSERT INTO `tb_user` VALUES (10003, &#x27;马化腾01&#x27;, &#x27;pony&#x27;, 16, &#x27;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi6.hexun.com%2F2017-12-07%2F191899854.jpg&amp;refer=http%3A%2F%2Fi6.hexun.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1630075120&amp;t=6c626f62c3bd83603c940b5f4cd2c3d7&#x27;, &#x27;13900889988&#x27;, &#x27;广东省汕头市潮南区&#x27;, &#x27;1993年获深圳大学理学学士学位。腾讯公司主要创办人之一。现任腾讯公司董事会主席兼首席执行官；全国青联副主席；全国人大代表&#x27;, &#x27;2021-07-28 22:38:49&#x27;, NULL);SET FOREIGN_KEY_CHECKS = 1; UserEntity 实体 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@Datapublic class UserEntity implements Serializable &#123; private static final long serialVersionUID = 1L; /** * 主键id */ private Integer userId; /** * 名称 */ private String name; /** * 名称 */ private String nickname; /** * 年龄 */ private Integer age; /** * 头像 */ private String avatar; /** * 电话 */ private String phone; /** * 地址 */ private String address; /** * 备注 */ private String remark; /** * 创建时间 */ private Date createdTime; /** * 更新时间 */ private Date updatedTime;&#125; UserMapper 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public interface UserMapper &#123; /** * 新增 * * @author biubiu * @date 2021/08/08 **/ int insert(UserEntity userEntity); /** * 刪除 * * @author biubiu * @date 2021/08/08 **/ int delete(int id); /** * 更新 * * @author biubiu * @date 2021/08/08 **/ int update(UserEntity userEntity); /** * 查询 根据主键 id 查询 * * @author biubiu * @date 2021/08/08 **/ UserEntity load(int id); /** * 查询 分页查询 * * @author biubiu * @date 2021/08/08 **/ List&lt;UserEntity&gt; pageList(int pageNum, int pageSize); /** * 查询 分页查询 count * * @author biubiu * @date 2021/08/08 **/ int pageListCount(int pageNum, int pageSize);&#125; UserMapper.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.biubiu.multidatabase.mapper.UserMapper&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.biubiu.multidatabase.entity.UserEntity&quot; &gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt; &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt; &lt;result column=&quot;nickname&quot; property=&quot;nickname&quot; /&gt; &lt;result column=&quot;age&quot; property=&quot;age&quot; /&gt; &lt;result column=&quot;avatar&quot; property=&quot;avatar&quot; /&gt; &lt;result column=&quot;phone&quot; property=&quot;phone&quot; /&gt; &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt; &lt;result column=&quot;remark&quot; property=&quot;remark&quot; /&gt; &lt;result column=&quot;created_time&quot; property=&quot;createdTime&quot; /&gt; &lt;result column=&quot;updated_time&quot; property=&quot;updatedTime&quot; /&gt; &lt;/resultMap&gt; &lt;sql id=&quot;Base_Column_List&quot;&gt; user_id, name, nickname, age, avatar, phone, address, remark, created_time, updated_time &lt;/sql&gt; &lt;insert id=&quot;insert&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;id&quot; keyProperty=&quot;id&quot; parameterType=&quot;com.biubiu.multidatabase.entity.UserEntity&quot;&gt; INSERT INTO tb_user &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; user_id, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; name, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; nickname, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; age, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; avatar, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; phone, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; address, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; remark, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; created_time, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; updated_time &lt;/if&gt; &lt;/trim&gt; &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; #&#123;userId&#125;, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; #&#123;name&#125;, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; #&#123;nickname&#125;, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; #&#123;age&#125;, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; #&#123;avatar&#125;, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; #&#123;phone&#125;, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; #&#123;address&#125;, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; #&#123;remark&#125;, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; #&#123;createdTime&#125;, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; #&#123;updatedTime&#125; &lt;/if&gt; &lt;/trim&gt; &lt;/insert&gt; &lt;delete id=&quot;delete&quot; &gt; DELETE FROM tb_user WHERE user_id = #&#123;id&#125; &lt;/delete&gt; &lt;update id=&quot;update&quot; parameterType=&quot;com.biubiu.multidatabase.entity.UserEntity&quot;&gt; UPDATE tb_user &lt;set&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt;user_user_id = #&#123;userId&#125;,&lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt;nickname = #&#123;nickname&#125;,&lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt;avatar = #&#123;avatar&#125;,&lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt;phone = #&#123;phone&#125;,&lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt;address = #&#123;address&#125;,&lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt;remark = #&#123;remark&#125;,&lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt;created_time = #&#123;createdTime&#125;,&lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt;updated_time = #&#123;updatedTime&#125;&lt;/if&gt; &lt;/set&gt; WHERE user_id = #&#123;id&#125; &lt;/update&gt; &lt;select id=&quot;load&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot; /&gt; FROM tb_user WHERE user_id = #&#123;id&#125; &lt;/select&gt; &lt;select id=&quot;pageList&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot; /&gt; FROM tb_user LIMIT #&#123;pageNum&#125;, #&#123;pageSize&#125; &lt;/select&gt; &lt;select id=&quot;pageListCount&quot; resultType=&quot;java.lang.Integer&quot;&gt; SELECT count(1) FROM tb_user &lt;/select&gt;&lt;/mapper&gt; service层 UserService 1234567891011121314151617181920212223242526public interface UserService &#123; /** * 新增 */ public Object insert(UserEntity tbUserEntity); /** * 删除 */ public ReturnT&lt;String&gt; delete(int id); /** * 更新 */ public ReturnT&lt;String&gt; update(UserEntity tbUserEntity); /** * 根据主键 id 查询 */ public UserEntity load(int id); /** * 分页查询 */ public Map&lt;String, Object&gt; pageList(int offset, int pagesize);&#125; UserServiceImpl 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354@Servicepublic class UserServiceImpl implements UserService &#123; @Resource private UserMapper userMapper; @Override public Object insert(UserEntity tbUserEntity) &#123; // valid if (tbUserEntity == null) &#123; return ReturnT.error(&quot;必要参数缺失&quot;); &#125; userMapper.insert(tbUserEntity); return ReturnT.success(); &#125; @Override public ReturnT&lt;String&gt; delete(int id) &#123; int ret = userMapper.delete(id); return ret &gt; 0 ? ReturnT.success() : ReturnT.error(); &#125; @Override public ReturnT&lt;String&gt; update(UserEntity tbUserEntity) &#123; int ret = userMapper.update(tbUserEntity); return ret &gt; 0 ? ReturnT.success() : ReturnT.error(); &#125; @Override public UserEntity load(int id) &#123; return userMapper.load(id); &#125; @Override public Map&lt;String, Object&gt; pageList(int pageNum, int pageSize) &#123; List&lt;UserEntity&gt; pageList = userMapper.pageList(pageNum, pageSize); int totalCount = userMapper.pageListCount(pageNum, pageSize); // result Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); result.put(&quot;pageList&quot;, pageList); result.put(&quot;totalCount&quot;, totalCount); return result; &#125;&#125; controller 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162@RestController@RequestMapping(&quot;/user&quot;)public class UserController &#123; @Resource private UserService userService; /** * 新增 * * @author biubiu * @date 2021/08/08 **/ @RequestMapping(&quot;/insert&quot;) public Object insert(UserEntity tbUser) &#123; return userService.insert(tbUser); &#125; /** * 刪除 * * @author biubiu * @date 2021/08/08 **/ @RequestMapping(&quot;/delete&quot;) public ReturnT&lt;String&gt; delete(int id) &#123; return userService.delete(id); &#125; /** * 更新 * * @author biubiu * @date 2021/08/08 **/ @RequestMapping(&quot;/update&quot;) public ReturnT&lt;String&gt; update(UserEntity tbUser) &#123; return userService.update(tbUser); &#125; /** * 查询 根据主键 id 查询 * * @author biubiu * @date 2021/08/08 **/ @RequestMapping(&quot;/load&quot;) public Object load(int id) &#123; return userService.load(id); &#125; /** * 查询 分页查询 * * @author biubiu * @date 2021/08/08 **/ @RequestMapping(&quot;/pageList&quot;) public Map&lt;String, Object&gt; pageList(@RequestParam(required = false, defaultValue = &quot;0&quot;) int pageNum, @RequestParam(required = false, defaultValue = &quot;10&quot;) int pageSize) &#123; return userService.pageList(pageNum, pageSize); &#125;&#125; 统一返回实体 common ReturnT 123456789101112131415161718192021222324252627282930313233343536public class ReturnT&lt;T&gt; implements Serializable &#123; private static final long serialVersionUID = 1L; private int code; private String message; private T data; private ReturnT(int code, String message, T data) &#123; this.code = code; this.message = message; this.data = data; &#125; public static &lt;T&gt; ReturnT&lt;T&gt; success(T data) &#123; return new ReturnT&lt;&gt;(0, &quot;success&quot;, data); &#125; public static &lt;T&gt; ReturnT&lt;T&gt; success() &#123; return success(null); &#125; public static &lt;T&gt; ReturnT&lt;T&gt; error(int code, String message) &#123; return new ReturnT&lt;&gt;(code, message, null); &#125; public static &lt;T&gt; ReturnT&lt;T&gt; error(String message) &#123; return error(-1, message); &#125; public static &lt;T&gt; ReturnT&lt;T&gt; error() &#123; return error(&quot;error&quot;); &#125;&#125; 配置 Mapper接口扫描 1234@MapperScan(&quot;com.biubiu.multidatabase.mapper&quot;)@Configurationpublic class MyBatisConfig &#123;&#125; 数据源配置 123456789101112spring: datasource: url: jdbc:mysql://127.0.0.1:3306/biubiu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: root type: com.alibaba.druid.pool.DruidDataSourcemybatis: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl mapper-locations: classpath:mapper/*.xml pom.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springboot-multidatabase-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;mybatis.version&gt;2.2.0&lt;/mybatis.version&gt; &lt;fastjson.version&gt;1.2.76&lt;/fastjson.version&gt; &lt;druid.version&gt;1.2.6&lt;/druid.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--web启动器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 添加AOP坐标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--MyBatis框架--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--MySQL驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--Druid数据源--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--lombok工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--fastjson--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 测试没问题 多数据源切换我们目前已经有一个基础项目，接下来正式开始进入正题。所谓多数据源切换，无非就是对Druid，HikriCP或者其他数据源上做手脚 废话不多说，先把我们的数据库连接字符串配上去 配置主从数据库连接 application.yml 123456789101112131415161718spring: datasource: druid: biubiu-master: #主库 url: jdbc:mysql://localhost:3306/biubiu?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8 driver-class-name: com.mysql.cj.jdbc.Driver username: root password: root biubiu-slave: #从库 url: jdbc:mysql://localhost:3306/biubiu_slave?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf8 driver-class-name: com.mysql.cj.jdbc.Driver username: root password: rootmybatis: configuration: log-impl: org.apache.ibatis.logging.stdout.StdOutImpl mapper-locations: classpath:mapper/*.xml 把配置读到Java里，初始化数据源 DataSourceName 数据源名称12345678public class DataSourceName &#123; private DataSourceName()&#123;&#125; public static final String MASTER = &quot;biubiu&quot;; public static final String SLAVE = &quot;biubiu_slave&quot;;&#125; DynamicDataSource 动态数据源基类123456789101112131415161718192021222324252627public class DynamicDataSource extends AbstractRoutingDataSource &#123; private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;&gt;(); public DynamicDataSource(DataSource defaultTargetDataSource, Map&lt;Object, Object&gt; targetDataSources) &#123; super.setDefaultTargetDataSource(defaultTargetDataSource); super.setTargetDataSources(targetDataSources); super.afterPropertiesSet(); &#125; @Override protected Object determineCurrentLookupKey() &#123; return getDataSource(); &#125; public static void setDataSource(String dataSource) &#123; contextHolder.set(dataSource); &#125; public static String getDataSource() &#123; return contextHolder.get(); &#125; public static void clearDataSource() &#123; contextHolder.remove(); &#125;&#125; DynamicDataSourceConfig 多数据源配置类123456789101112131415161718192021222324@Configurationpublic class DynamicDataSourceConfig &#123; @Bean @ConfigurationProperties(&quot;spring.datasource.druid.biubiu-master&quot;) public DataSource masterDataSource() throws SQLException &#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean @ConfigurationProperties(&quot;spring.datasource.druid.biubiu-slave&quot;) public DataSource slaveDataSource() &#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean @Primary public DynamicDataSource dataSource(DataSource masterDataSource, DataSource slaveDataSource) &#123; Map&lt;Object, Object&gt; targetDataSources = new HashMap&lt;&gt;(); targetDataSources.put(DataSourceName.MASTER, masterDataSource); targetDataSources.put(DataSourceName.SLAVE, slaveDataSource); return new DynamicDataSource(masterDataSource, targetDataSources); &#125;&#125; 到此我们数据源配置，初始化完成！！接下来，开始做切换，我们采用Aop方式做数据源切换，大致思路是 Aop拦截注解，通过注解指定的数据源做切换 自定义注解 AOP拦截 DataSource注解 123456@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface DataSource &#123; String name() default &quot;&quot;;&#125; DataSourceAspect Aop拦截 123456789101112131415161718192021222324252627@Aspect@Componentpublic class DataSourceAspect &#123; @Pointcut(&quot;@annotation(com.biubiu.multidatabase.config.DataSource)&quot;) public void dataSourcePointCut() &#123; &#125; @Around(&quot;dataSourcePointCut()&quot;) public Object around(ProceedingJoinPoint point) throws Throwable &#123; MethodSignature signature = (MethodSignature) point.getSignature(); Method method = signature.getMethod(); DataSource dataSource = method.getAnnotation(DataSource.class); if (dataSource == null) &#123; DynamicDataSource.setDataSource(DataSourceName.MASTER); &#125; else &#123; DynamicDataSource.setDataSource(dataSource.name()); &#125; try &#123; return point.proceed(); &#125; finally &#123; DynamicDataSource.clearDataSource(); &#125; &#125;&#125; 开始使用在Controller/Service/Mapper里可以都可以试试1234567891011@RequestMapping(&quot;/loadMaster&quot;)@DataSource(name = DataSourceName.MASTER)public Object loadMaster(int id) &#123; return userService.load(id);&#125;hex@RequestMapping(&quot;/loadSlave&quot;)@DataSource(name = DataSourceName.SLAVE)public Object loadSlave(int id) &#123; return userService.load(id);&#125; 结论","categories":[{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java后端","slug":"Java后端","permalink":"https://baijq.github.io/tags/Java%E5%90%8E%E7%AB%AF/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://baijq.github.io/tags/SpringBoot/"}]},{"title":"SpringBoot系列（二）-MyBatis数据层","slug":"SpringBoot系列（二）-MyBatis数据层","date":"2021-08-11T03:39:52.000Z","updated":"2021-09-04T13:06:10.310Z","comments":true,"path":"2021/08/11/SpringBoot系列（二）-MyBatis数据层/","link":"","permalink":"https://baijq.github.io/2021/08/11/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-MyBatis%E6%95%B0%E6%8D%AE%E5%B1%82/","excerpt":"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。非常灵活，可定制化程度高！","text":"MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。非常灵活，可定制化程度高！ 简单介绍MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 准备工作MySQL创建一个biubiu的数据库 创建一张表 tb_user，插入一些测试数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for tb_user-- ----------------------------DROP TABLE IF EXISTS `tb_user`;CREATE TABLE `tb_user` ( `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键Id&#x27;, `name` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;, `nickname` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;昵称&#x27;, `age` int(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;, `gender` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;性别&#x27;, `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;, `phone` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;电话&#x27;, `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;地址&#x27;, `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;, `created_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;, `updated_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;, PRIMARY KEY (`user_id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 10001 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &#x27;用户表&#x27; ROW_FORMAT = Dynamic;-- ------------------------------ Records of tb_user-- ----------------------------INSERT INTO `tb_user` VALUES (10003, &#x27;刘备&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10004, &#x27;孙尚香&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10005, &#x27;周瑜&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10006, &#x27;小乔&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10007, &#x27;诸葛亮&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10008, &#x27;黄月英&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10009, &#x27;关羽&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10010, &#x27;张飞&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10011, &#x27;赵云&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10012, &#x27;黄总&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10013, &#x27;曹操&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10014, &#x27;司马懿&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10015, &#x27;貂蝉&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10016, &#x27;吕布&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10017, &#x27;马超&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10018, &#x27;魏延&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10019, &#x27;孟获&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10020, &#x27;大乔&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10021, &#x27;刘婵&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10022, &#x27;姜维&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10023, &#x27;廖化&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10024, &#x27;关平&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);SET FOREIGN_KEY_CHECKS = 1; 创建项目创建一个springboot-mybatis-demo的web项目，如图 开始集成 引入相关依赖mybatis-spring-boot-startermysql-connector-java最终的pom.xml文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springboot-mybatis-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;mybatis.version&gt;2.2.0&lt;/mybatis.version&gt; &lt;fastjson.version&gt;1.2.76&lt;/fastjson.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--web启动器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--MyBatis框架--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--MySQL驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--lombok工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--fastjson工具--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 实体类 在写之前推荐一个工具，这里有个 代码生成器网站 推荐使用! UserEntity 对应数据库的表 biubiu.tb_user 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/** * &lt;p&gt; * UserEntity * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@Datapublic class UserEntity implements Serializable &#123; private static final long serialVersionUID = 1L; /** * 主键id */ private Long userId; /** * 名称 */ private String name; /** * 昵称 */ private String nickname; /** * 年龄 */ private Integer age; /** * 性别 */ private String gender; /** * 头像 */ private String avatar; /** * 电话 */ private String phone; /** * 地址 */ private String address; /** * 备注 */ private String remark; /** * 创建时间 */ private Date createdTime; /** * 更新时间 */ private Date updatedTime;&#125; 数据交互层接口 UserMapper(增删改查) 12345678910111213141516171819202122232425262728293031323334353637383940/** * &lt;p&gt; * UserMapper * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */public interface UserMapper &#123; /** * 新增 */ int insert(UserEntity user); /** * 刪除 */ int delete(int id); /** * 更新 */ int update(UserEntity user); /** * 查询 根据主键 id 查询 */ UserEntity load(int id); /** * 查询 分页查询 */ List&lt;UserEntity&gt; pageList(int pageNum, int pageSize); /** * 查询 分页查询 count */ int pageListCount(int pageNum, int pageSize);&#125; 接口对应的UserMapper.xml文件 MyBatis提供两种写sql的方式，注解和xml，我个人觉得xml比较好，把代码和sql分开，便于维护。有时候sql写的复杂了注解方式有局限性，我习惯上使用xml方式。IDEA有个插件叫MyBatisX，可以从mapper到xml直接跳转，奥里给→_→ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.biubiu.mb.mapper.UserMapper&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;/&gt; &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt; &lt;result column=&quot;nickname&quot; property=&quot;nickname&quot;/&gt; &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt; &lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt; &lt;result column=&quot;avatar&quot; property=&quot;avatar&quot;/&gt; &lt;result column=&quot;phone&quot; property=&quot;phone&quot;/&gt; &lt;result column=&quot;address&quot; property=&quot;address&quot;/&gt; &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt; &lt;result column=&quot;created_time&quot; property=&quot;createdTime&quot;/&gt; &lt;result column=&quot;updated_time&quot; property=&quot;updatedTime&quot;/&gt; &lt;/resultMap&gt; &lt;sql id=&quot;Base_Column_List&quot;&gt; user_id, name, nickname, age, gender, avatar, phone, address, remark, created_time, updated_time &lt;/sql&gt; &lt;insert id=&quot;insert&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;user_id&quot; keyProperty=&quot;userId&quot; parameterType=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; INSERT INTO tb_user &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; user_id, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; name, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; nickname, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; age, &lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt; gender, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; avatar, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; phone, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; address, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; remark, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; created_time, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; updated_time &lt;/if&gt; &lt;/trim&gt; &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; #&#123;userId&#125;, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; #&#123;name&#125;, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; #&#123;nickname&#125;, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; #&#123;age&#125;, &lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt; #&#123;gender&#125;, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; #&#123;avatar&#125;, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; #&#123;phone&#125;, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; #&#123;address&#125;, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; #&#123;remark&#125;, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; #&#123;createdTime&#125;, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; #&#123;updatedTime&#125; &lt;/if&gt; &lt;/trim&gt; &lt;/insert&gt; &lt;delete id=&quot;delete&quot;&gt; DELETE FROM tb_user WHERE user_id = #&#123;userId&#125; &lt;/delete&gt; &lt;update id=&quot;update&quot; parameterType=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; UPDATE tb_user &lt;set&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt;user_id = #&#123;userId&#125;,&lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt;nickname = #&#123;nickname&#125;,&lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt;gender = #&#123;gender&#125;,&lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt;avatar = #&#123;avatar&#125;,&lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt;phone = #&#123;phone&#125;,&lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt;address = #&#123;address&#125;,&lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt;remark = #&#123;remark&#125;,&lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt;created_time = #&#123;createdTime&#125;,&lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt;updated_time = #&#123;updatedTime&#125;&lt;/if&gt; &lt;/set&gt; WHERE user_id = #&#123;userId&#125; &lt;/update&gt; &lt;select id=&quot;load&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; FROM tb_user WHERE user_id = #&#123;userId&#125; &lt;/select&gt; &lt;select id=&quot;pageList&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; FROM tb_user LIMIT #&#123;pageNum&#125;, #&#123;pageSize&#125; &lt;/select&gt; &lt;select id=&quot;pageListCount&quot; resultType=&quot;java.lang.Integer&quot;&gt; SELECT count(1) FROM tb_user &lt;/select&gt;&lt;/mapper&gt; service层，包括接口和实现类 UserService接口 123456789101112131415161718192021222324252627282930313233343536/** * &lt;p&gt; * UserService * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */public interface UserService &#123; /** * 新增 */ public boolean insert(UserEntity user); /** * 删除 */ public boolean delete(int id); /** * 更新 */ public boolean update(UserEntity user); /** * 根据主键 id 查询 */ public UserEntity load(int id); /** * 分页查询 */ public Map&lt;String, Object&gt; pageList(int pageNum, int pageSize);&#125; UserServiceImpl实现类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * &lt;p&gt; * UserServiceImpl * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@Servicepublic class UserServiceImpl implements UserService &#123; @Resource private UserMapper userMapper; @Override public boolean insert(UserEntity user) &#123; // valid if (user == null) &#123; throw new RuntimeException(&quot;必要参数缺失&quot;); &#125; int insert = userMapper.insert(user); return insert &gt; 0; &#125; @Override public boolean delete(int id) &#123; int ret = userMapper.delete(id); return ret &gt; 0; &#125; @Override public boolean update(UserEntity user) &#123; int ret = userMapper.update(user); return ret &gt; 0; &#125; @Override public UserEntity load(int id) &#123; return userMapper.load(id); &#125; @Override public Map&lt;String, Object&gt; pageList(int pageNum, int pageSize) &#123; List&lt;UserEntity&gt; pageList = userMapper.pageList(pageNum, pageSize); int totalCount = userMapper.pageListCount(pageNum, pageSize); // result Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); result.put(&quot;pageList&quot;, pageList); result.put(&quot;totalCount&quot;, totalCount); return result; &#125;&#125; UserController 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/** * &lt;p&gt; * UserController * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@RestController@RequestMapping(&quot;/api/users&quot;)public class UserController &#123; @Resource private UserService userService; /** * 新增 */ @RequestMapping(&quot;/insert&quot;) public Object insert(UserEntity user) &#123; return userService.insert(user); &#125; /** * 刪除 */ @RequestMapping(&quot;/delete&quot;) public Object delete(int id) &#123; return userService.delete(id); &#125; /** * 更新 */ @RequestMapping(&quot;/update&quot;) public Object update(UserEntity user) &#123; return userService.update(user); &#125; /** * 查询 根据主键 id 查询 */ @RequestMapping(&quot;/load&quot;) public Object load(int id) &#123; return userService.load(id); &#125; /** * 查询 分页查询 */ @RequestMapping(&quot;/pageList&quot;) public Map&lt;String, Object&gt; pageList(@RequestParam(required = false, defaultValue = &quot;0&quot;) int pageNum, @RequestParam(required = false, defaultValue = &quot;10&quot;) int pageSize) &#123; return userService.pageList(pageNum, pageSize); &#125;&#125; 配置数据库连接信息上面写了一系列代码，唉，差点累死了，接下来轻松多了！ 我们写了一些列类，下面开始连接数据库，以及MyBatis的xml文件位置。注意修改数据库连接字符串以及用户名密码！ application.properties 1234567spring.datasource.url=jdbc:mysql://127.0.0.1:3306/biubiu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=truespring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.username=rootspring.datasource.password=root#MyBatis的xml文件，UserMapper.xmlmybatis.mapper-locations=classpath:mapper/*Mapper.xml 最后一步，在配置下mapper接口扫描，在启动类上加上一个注解@MapperScan(&quot;com.biubiu.mb.mapper&quot;) 123456789101112131415161718/** * &lt;p&gt; * MybatisApplication * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@MapperScan(&quot;com.biubiu.mb.mapper&quot;)@SpringBootApplicationpublic class MyBatisApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(MyBatisApplication.class, args); &#125;&#125; 开始测试费了九牛二虎之力，终于到了验收成果的时候，有些小激动，废话不多说，开始干！ 打开postman神器，开始一个一个测试我们的增删改查 查询10007的用户 http://localhost:8080/api/users/load?id=10007 分页查询 http://localhost:8080/api/users/pageList?pageNum=0&amp;pageSize=5 插入一个人 好家伙看起来成功了，我们查一下数据库，果真成功了 成功了，那我再用接口查一把 修改下这个人 数据库看眼，是否成功 删除把 问题排除由于我写的时候太粗心把好几个单词打错了，导致了几个Bug…要细心细心细心呀！！！ 错误1pagenum小写了，和接口参数里对不上也会报错 错误2自动生成Id我全都写成了id，这里应该是UserEntity里的UserId和数据库字段user_id 错误3也是和UserEntity里的UserId不对应造成的","categories":[{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://baijq.github.io/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://baijq.github.io/tags/SpringBoot/"}]},{"title":"SpringBoot系列（一）-Web入门篇","slug":"SpringBoot系列（一）-Web入门篇","date":"2021-08-10T03:39:52.000Z","updated":"2021-09-04T13:06:17.738Z","comments":true,"path":"2021/08/10/SpringBoot系列（一）-Web入门篇/","link":"","permalink":"https://baijq.github.io/2021/08/10/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-Web%E5%85%A5%E9%97%A8%E7%AF%87/","excerpt":"SpringBoot可以轻松创建独立的，生产级的基于Spring的应用程序，SpringBoot对周边框架的精简和整合，实现自动装配！这篇主要是SpringBoot入门的HelloWorld!","text":"SpringBoot可以轻松创建独立的，生产级的基于Spring的应用程序，SpringBoot对周边框架的精简和整合，实现自动装配！这篇主要是SpringBoot入门的HelloWorld! 简单介绍SpringBoot 是由 Pivotal 团队提供的全新框架 ，它之前业内大多都使用ssm构建项目，需要配置各种xml配置文件，随着微服务的发展，这种繁琐的配置越来越让人头疼！SpringBoot对此做了简化配置，让开发人员快速构建基于Spring的项目 特点 快速创建Spring应用 内嵌Tomcat，Jetty等Servlet容器，最后打包的jar可以直接启动运行 无代码生成，也不需要配置额外的xml 尽可能自动配置Spring容器 环境准备JDK 1.8Maven 3.6.3IDEA 备注：maven可以设置下阿里云镜像，下载速度会很快 1234567&lt;!-- 阿里云镜像 --&gt;&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; 创建项目此系列我打算使用一个父级项目springboot-demo，然后下面建立各个子项目的方式来创建项目。 IDAE：file -&gt; new -&gt; project 选择项目名称，项目路径，等等 选择版本号，选择Web环境的依赖 项目结构如图，删除没用的文件，因为本项目是父项目，所以src也删了，改一下父pom.xml文件 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--项目坐标--&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!--SpringBoot父依赖--&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.5.3&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;!--属性设置--&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--这个Web依赖也删掉，在各自的子模块引入--&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; --&gt; &lt;/dependencies&gt; &lt;!--maven打包插件也删掉，在各自的子模块引入--&gt; &lt;!-- &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; --&gt;&lt;/project&gt; 好，继续子项目创建，右键项目，new -&gt; module 这里选择Maven项目就行 创建完成后，再看看项目结构 可以看到父级pom.xml下多了module模块，这个表示子模块的意思 这里我们把项目搭建完毕了，我们改下子模块springboot-web-demo的pom.xml如下 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;springboot-web-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--maven打包插件--&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 编写代码 项目结构 注意，application.properties是空的，可以不加 启动类 WebApplicationo.java 12345678910111213141516/** * &lt;p&gt; * WebApplication * &lt;/p&gt; * * @author biubiu * @since 2021/8/10 */@SpringBootApplicationpublic class WebApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(WebApplication.class, args); &#125;&#125; HelloController.java 1234567891011121314151617/** * &lt;p&gt; * HelloController * &lt;/p&gt; * * @author biubiu * @since 2021/8/10 */@RestControllerpublic class HelloController &#123; @GetMapping(&quot;/hello&quot;) public String hello() &#123; return &quot;hello spring-boot!!!&quot;; &#125;&#125; 启动项目：日志如下说明成功 123456789101112 . ____ _ __ _ _ /\\\\ / ___&#x27;_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | &#x27;_ | &#x27;_| | &#x27;_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) &#x27; |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.5.3)............2021-08-10 15:42:37.586 INFO 9444 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1160 ms2021-08-10 15:42:38.037 INFO 9444 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;2021-08-10 15:42:38.051 INFO 9444 --- [ main] com.biubiu.web.WebApplication : Started WebApplication in 2.3 seconds (JVM running for 3.947) 浏览器输入 http://localhost:8080/hello测试 注意事项 SpringBoot内嵌了Tomcat容器，所以不需要外部Tomcat容器 思考点高深的东西，SpringBoot自动装配原理是啥？","categories":[{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://baijq.github.io/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://baijq.github.io/tags/SpringBoot/"}]}],"categories":[{"name":"Logback","slug":"Logback","permalink":"https://baijq.github.io/categories/Logback/"},{"name":"SpringBoot 系列","slug":"SpringBoot-系列","permalink":"https://baijq.github.io/categories/SpringBoot-%E7%B3%BB%E5%88%97/"},{"name":"Docker","slug":"Docker","permalink":"https://baijq.github.io/categories/Docker/"},{"name":"古诗词系列","slug":"古诗词系列","permalink":"https://baijq.github.io/categories/%E5%8F%A4%E8%AF%97%E8%AF%8D%E7%B3%BB%E5%88%97/"}],"tags":[{"name":"Java后端","slug":"Java后端","permalink":"https://baijq.github.io/tags/Java%E5%90%8E%E7%AB%AF/"},{"name":"Java","slug":"Java","permalink":"https://baijq.github.io/tags/Java/"},{"name":"Docker","slug":"Docker","permalink":"https://baijq.github.io/tags/Docker/"},{"name":"古诗词","slug":"古诗词","permalink":"https://baijq.github.io/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://baijq.github.io/tags/SpringBoot/"}]}