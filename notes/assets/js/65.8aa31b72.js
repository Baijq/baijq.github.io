(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{478:function(t,_,v){"use strict";v.r(_);var r=v(62),a=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),v("p",[t._v("面向对象的七大原则和23种设计模式")]),t._v(" "),v("h2",{attrs:{id:"七大原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七大原则"}},[t._v("#")]),t._v(" 七大原则")]),t._v(" "),v("p",[t._v("7种设计原则，它们分别为开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则和合成复用原则，实际上，这些原则的目的只有一个："),v("strong",[t._v("降低对象之间的耦合，增加程序的可复用性、可扩展性和可维护性。")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("设计原则")]),t._v(" "),v("th",[t._v("概括")]),t._v(" "),v("th",[t._v("目的")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("开闭原则")]),t._v(" "),v("td",[t._v("对扩展开放，对修改关闭")]),t._v(" "),v("td",[t._v("降低维护带来的新风险")])]),t._v(" "),v("tr",[v("td",[t._v("里氏替换原则")]),t._v(" "),v("td",[t._v("不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义")]),t._v(" "),v("td",[t._v("防止继承泛滥")])]),t._v(" "),v("tr",[v("td",[t._v("依赖倒置原则")]),t._v(" "),v("td",[t._v("高层不应该依赖低层，要面向接口编程")]),t._v(" "),v("td",[t._v("更利于代码结构的升级扩展")])]),t._v(" "),v("tr",[v("td",[t._v("单一职责原则")]),t._v(" "),v("td",[t._v("一个类只干一件事，实现类要单一")]),t._v(" "),v("td",[t._v("便于理解，提高代码的可读性")])]),t._v(" "),v("tr",[v("td",[t._v("接口隔离原则")]),t._v(" "),v("td",[t._v("一个接口只干一件事，接口要精简单一")]),t._v(" "),v("td",[t._v("功能解耦，高聚合、低耦合")])]),t._v(" "),v("tr",[v("td",[t._v("狄米特法则")]),t._v(" "),v("td",[t._v("不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度")]),t._v(" "),v("td",[t._v("只和朋友交流，不和陌生人说话，减少代码臃肿")])]),t._v(" "),v("tr",[v("td",[t._v("合成复用原则")]),t._v(" "),v("td",[t._v("尽量使用组合或者聚合关系实现代码复用，少使用继承")]),t._v(" "),v("td",[t._v("降低代码耦合")])])])]),t._v(" "),v("h4",{attrs:{id:"_1-开闭原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-开闭原则"}},[t._v("#")]),t._v(" 1 开闭原则")]),t._v(" "),v("p",[t._v("开闭原则（Open Closed Principle，OCP）当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。对扩展开放，对修改关闭")]),t._v(" "),v("h4",{attrs:{id:"_2-里氏替换原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-里氏替换原则"}},[t._v("#")]),t._v(" 2 里氏替换原则")]),t._v(" "),v("p",[t._v("里氏替换原则（Liskov Substitution Principle，LSP）子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。")]),t._v(" "),v("h4",{attrs:{id:"_3-依赖倒置原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-依赖倒置原则"}},[t._v("#")]),t._v(" 3 依赖倒置原则")]),t._v(" "),v("p",[t._v("依赖倒置原则（Dependence Inversion Principle，DIP）高层模块不应该依赖低层模块，两者都应该依赖其抽象，实现开闭原则的重要途径之一。依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性")]),t._v(" "),v("h4",{attrs:{id:"_4-单一职责原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-单一职责原则"}},[t._v("#")]),t._v(" 4 单一职责原则")]),t._v(" "),v("p",[t._v("单一职责原则（Single Responsibility Principle，SRP）规定一个类应该有且仅有一个引起它变化的原因")]),t._v(" "),v("h4",{attrs:{id:"_5-接口隔离原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-接口隔离原则"}},[t._v("#")]),t._v(" 5 接口隔离原则")]),t._v(" "),v("p",[t._v("接口隔离原则（Interface Segregation Principle，ISP）要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法")]),t._v(" "),v("h4",{attrs:{id:"_6-狄米特法则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-狄米特法则"}},[t._v("#")]),t._v(" 6 狄米特法则")]),t._v(" "),v("p",[t._v("迪米特法则（Law of Demeter，LoD）又叫作最少知识原则（Least Knowledge Principle，LKP）如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性")]),t._v(" "),v("h4",{attrs:{id:"_7-合成复用原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-合成复用原则"}},[t._v("#")]),t._v(" 7 合成复用原则")]),t._v(" "),v("p",[t._v("合成复用原则（Composite Reuse Principle，CRP）又叫组合/聚合复用原则（Composition/Aggregate Reuse Principle，CARP）它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。")]),t._v(" "),v("h2",{attrs:{id:"_23种设计模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_23种设计模式"}},[t._v("#")]),t._v(" 23种设计模式")]),t._v(" "),v("p",[t._v("设计模式：23种，是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性，以及类的关联关系和组合关系的充分理解。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("名称")]),t._v(" "),v("th",[t._v("举例")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("创建型（5）")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/core/note/java/code/design_pattern/Singleton.html"}},[t._v("单例")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("原型")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("工厂方法")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("抽象工厂")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("建造者")])],1),t._v(" "),v("td",[t._v("描述“怎样创建对象” “将对象的创建与使用分离”")])]),t._v(" "),v("tr",[v("td",[t._v("结构型（7）")]),t._v(" "),v("td",[v("RouterLink",{attrs:{to:"/core/note/java/code/design_pattern/Proxy.html"}},[t._v("代理")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("适配器")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("桥接")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("装饰")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("外观")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("享元")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("组合")])],1),t._v(" "),v("td",[t._v("如何将类或对象按某种布局组成更大的结构")])]),t._v(" "),v("tr",[v("td",[t._v("行为型（11）")]),t._v(" "),v("td",[v("a",{attrs:{href:""}},[t._v("模板方法")]),t._v("、"),v("RouterLink",{attrs:{to:"/core/note/java/code/design_pattern/Strategy.html"}},[t._v("策略")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("命令")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("职责链")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("状态")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("观察者")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("中介者")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("迭代器")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("访问者")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("备忘录")]),t._v("、"),v("a",{attrs:{href:""}},[t._v("解释器")])],1),t._v(" "),v("td",[t._v("描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务")])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);