{"meta":{"title":"BiuBiu","subtitle":"记录、学习、生活","description":"诗酒趁年华","author":"biubiu","url":"https://baijq.github.io","root":"/"},"pages":[{"title":"关于我","date":"2021-08-09T13:08:08.000Z","updated":"2021-08-09T14:58:22.291Z","comments":true,"path":"about/index.html","permalink":"https://baijq.github.io/about/index.html","excerpt":"","text":"BiuBiu:（让坚持成为品质，让优秀成为习惯）一个初入江湖的95后搬砖小伙。出生于甘肃某个宁静的的小山村。喜欢有趣的事情，有趣的人。喜欢优美的文字。喜欢简单，恬静。文笔不好，希望借博客锻炼一哈！ 本站分享内容 IT相关技术分享，分享是一种博爱的心境，学会分享，就学会了生活。 工具使用心得分享 生活趣事 偶尔写写文章，练练手 联系方式E-Mail：&#98;&#97;&#x69;&#x6a;&#x71;&#x6d;&#97;&#105;&#x6c;&#64;&#49;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;"},{"title":"分类","date":"2021-08-09T13:08:08.000Z","updated":"2021-08-09T13:17:08.405Z","comments":true,"path":"categories/index.html","permalink":"https://baijq.github.io/categories/index.html","excerpt":"","text":"title: 分类测试文章标题categories: 分类名"},{"title":"tags","date":"2021-08-09T13:16:36.000Z","updated":"2021-08-09T13:16:58.052Z","comments":true,"path":"tags/index.html","permalink":"https://baijq.github.io/tags/index.html","excerpt":"","text":"title: 标签测试文章标题tags: 标签1 标签2…"}],"posts":[{"title":"SpringBoot系列（二）-MyBatis数据层","slug":"SpringBoot系列（二）-MyBatis数据层","date":"2021-08-11T03:39:52.000Z","updated":"2021-08-11T14:15:56.803Z","comments":true,"path":"2021/08/11/SpringBoot系列（二）-MyBatis数据层/","link":"","permalink":"https://baijq.github.io/2021/08/11/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89-MyBatis%E6%95%B0%E6%8D%AE%E5%B1%82/","excerpt":"SpringBoot系列（二）-MyBatis数据层MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。非常灵活，可定制化程度高！","text":"SpringBoot系列（二）-MyBatis数据层MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。非常灵活，可定制化程度高！ 简单介绍MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 准备工作MySQL创建一个biubiu的数据库 创建一张表 tb_user，插入一些测试数据 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for tb_user-- ----------------------------DROP TABLE IF EXISTS `tb_user`;CREATE TABLE `tb_user` ( `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键Id&#x27;, `name` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;名称&#x27;, `nickname` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;昵称&#x27;, `age` int(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;, `gender` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;性别&#x27;, `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;头像&#x27;, `phone` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;电话&#x27;, `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;地址&#x27;, `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;备注&#x27;, `created_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;创建时间&#x27;, `updated_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;更新时间&#x27;, PRIMARY KEY (`user_id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 10001 CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = &#x27;用户表&#x27; ROW_FORMAT = Dynamic;-- ------------------------------ Records of tb_user-- ----------------------------INSERT INTO `tb_user` VALUES (10003, &#x27;刘备&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10004, &#x27;孙尚香&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10005, &#x27;周瑜&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10006, &#x27;小乔&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10007, &#x27;诸葛亮&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10008, &#x27;黄月英&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10009, &#x27;关羽&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10010, &#x27;张飞&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10011, &#x27;赵云&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10012, &#x27;黄总&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10013, &#x27;曹操&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10014, &#x27;司马懿&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10015, &#x27;貂蝉&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10016, &#x27;吕布&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10017, &#x27;马超&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10018, &#x27;魏延&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10019, &#x27;孟获&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10020, &#x27;大乔&#x27;, NULL, NULL, &#x27;女&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10021, &#x27;刘婵&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10022, &#x27;姜维&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10023, &#x27;廖化&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);INSERT INTO `tb_user` VALUES (10024, &#x27;关平&#x27;, NULL, NULL, &#x27;男&#x27;, NULL, NULL, NULL, NULL, &#x27;2021-08-11 16:54:04&#x27;, NULL);SET FOREIGN_KEY_CHECKS = 1; 创建项目创建一个springboot-mybatis-demo的web项目，如图 开始集成 引入相关依赖mybatis-spring-boot-startermysql-connector-java最终的pom.xml文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;parent&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springboot-mybatis-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;mybatis.version&gt;2.2.0&lt;/mybatis.version&gt; &lt;fastjson.version&gt;1.2.76&lt;/fastjson.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--web启动器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--MyBatis框架--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--MySQL驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--lombok工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--fastjson工具--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 实体类 在写之前推荐一个工具，这里有个 代码生成器网站 推荐使用! UserEntity 对应数据库的表 biubiu.tb_user 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.biubiu.mb.entity;import lombok.Data;import java.io.Serializable;import java.util.Date;/** * &lt;p&gt; * UserEntity * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@Datapublic class UserEntity implements Serializable &#123; private static final long serialVersionUID = 1L; /** * 主键id */ private Long userId; /** * 名称 */ private String name; /** * 昵称 */ private String nickname; /** * 年龄 */ private Integer age; /** * 性别 */ private String gender; /** * 头像 */ private String avatar; /** * 电话 */ private String phone; /** * 地址 */ private String address; /** * 备注 */ private String remark; /** * 创建时间 */ private Date createdTime; /** * 更新时间 */ private Date updatedTime;&#125; 数据交互层接口 UserMapper(增删改查) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.biubiu.mb.mapper;import com.biubiu.mb.entity.UserEntity;import java.util.List;/** * &lt;p&gt; * UserMapper * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */public interface UserMapper &#123; /** * 新增 */ int insert(UserEntity user); /** * 刪除 */ int delete(int id); /** * 更新 */ int update(UserEntity user); /** * 查询 根据主键 id 查询 */ UserEntity load(int id); /** * 查询 分页查询 */ List&lt;UserEntity&gt; pageList(int pageNum, int pageSize); /** * 查询 分页查询 count */ int pageListCount(int pageNum, int pageSize);&#125; 接口对应的UserMapper.xml文件 MyBatis提供两种写sql的方式，注解和xml，我个人觉得xml比较好，把代码和sql分开，便于维护。有时候sql写的复杂了注解方式有局限性，我习惯上使用xml方式。IDEA有个插件叫MyBatisX，可以从mapper到xml直接跳转，奥里给→_→ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.biubiu.mb.mapper.UserMapper&quot;&gt; &lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot;/&gt; &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt; &lt;result column=&quot;nickname&quot; property=&quot;nickname&quot;/&gt; &lt;result column=&quot;age&quot; property=&quot;age&quot;/&gt; &lt;result column=&quot;gender&quot; property=&quot;gender&quot;/&gt; &lt;result column=&quot;avatar&quot; property=&quot;avatar&quot;/&gt; &lt;result column=&quot;phone&quot; property=&quot;phone&quot;/&gt; &lt;result column=&quot;address&quot; property=&quot;address&quot;/&gt; &lt;result column=&quot;remark&quot; property=&quot;remark&quot;/&gt; &lt;result column=&quot;created_time&quot; property=&quot;createdTime&quot;/&gt; &lt;result column=&quot;updated_time&quot; property=&quot;updatedTime&quot;/&gt; &lt;/resultMap&gt; &lt;sql id=&quot;Base_Column_List&quot;&gt; user_id, name, nickname, age, gender, avatar, phone, address, remark, created_time, updated_time &lt;/sql&gt; &lt;insert id=&quot;insert&quot; useGeneratedKeys=&quot;true&quot; keyColumn=&quot;user_id&quot; keyProperty=&quot;userId&quot; parameterType=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; INSERT INTO tb_user &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; user_id, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; name, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; nickname, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; age, &lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt; gender, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; avatar, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; phone, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; address, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; remark, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; created_time, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; updated_time &lt;/if&gt; &lt;/trim&gt; &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt; #&#123;userId&#125;, &lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt; #&#123;name&#125;, &lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt; #&#123;nickname&#125;, &lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt; #&#123;age&#125;, &lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt; #&#123;gender&#125;, &lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt; #&#123;avatar&#125;, &lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt; #&#123;phone&#125;, &lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt; #&#123;address&#125;, &lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt; #&#123;remark&#125;, &lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt; #&#123;createdTime&#125;, &lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt; #&#123;updatedTime&#125; &lt;/if&gt; &lt;/trim&gt; &lt;/insert&gt; &lt;delete id=&quot;delete&quot;&gt; DELETE FROM tb_user WHERE user_id = #&#123;userId&#125; &lt;/delete&gt; &lt;update id=&quot;update&quot; parameterType=&quot;com.biubiu.mb.entity.UserEntity&quot;&gt; UPDATE tb_user &lt;set&gt; &lt;if test=&quot;null != userId and &#x27;&#x27; != userId&quot;&gt;user_id = #&#123;userId&#125;,&lt;/if&gt; &lt;if test=&quot;null != name and &#x27;&#x27; != name&quot;&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test=&quot;null != nickname and &#x27;&#x27; != nickname&quot;&gt;nickname = #&#123;nickname&#125;,&lt;/if&gt; &lt;if test=&quot;null != age and &#x27;&#x27; != age&quot;&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test=&quot;null != gender and &#x27;&#x27; != gender&quot;&gt;gender = #&#123;gender&#125;,&lt;/if&gt; &lt;if test=&quot;null != avatar and &#x27;&#x27; != avatar&quot;&gt;avatar = #&#123;avatar&#125;,&lt;/if&gt; &lt;if test=&quot;null != phone and &#x27;&#x27; != phone&quot;&gt;phone = #&#123;phone&#125;,&lt;/if&gt; &lt;if test=&quot;null != address and &#x27;&#x27; != address&quot;&gt;address = #&#123;address&#125;,&lt;/if&gt; &lt;if test=&quot;null != remark and &#x27;&#x27; != remark&quot;&gt;remark = #&#123;remark&#125;,&lt;/if&gt; &lt;if test=&quot;null != createdTime and &#x27;&#x27; != createdTime&quot;&gt;created_time = #&#123;createdTime&#125;,&lt;/if&gt; &lt;if test=&quot;null != updatedTime and &#x27;&#x27; != updatedTime&quot;&gt;updated_time = #&#123;updatedTime&#125;&lt;/if&gt; &lt;/set&gt; WHERE user_id = #&#123;userId&#125; &lt;/update&gt; &lt;select id=&quot;load&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; FROM tb_user WHERE user_id = #&#123;userId&#125; &lt;/select&gt; &lt;select id=&quot;pageList&quot; resultMap=&quot;BaseResultMap&quot;&gt; SELECT &lt;include refid=&quot;Base_Column_List&quot;/&gt; FROM tb_user LIMIT #&#123;pageNum&#125;, #&#123;pageSize&#125; &lt;/select&gt; &lt;select id=&quot;pageListCount&quot; resultType=&quot;java.lang.Integer&quot;&gt; SELECT count(1) FROM tb_user &lt;/select&gt;&lt;/mapper&gt; service层，包括接口和实现类 UserService接口 123456789101112131415161718192021222324252627282930313233343536373839404142package com.biubiu.mb.service;import com.biubiu.mb.entity.UserEntity;import java.util.Map;/** * &lt;p&gt; * UserService * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */public interface UserService &#123; /** * 新增 */ public boolean insert(UserEntity user); /** * 删除 */ public boolean delete(int id); /** * 更新 */ public boolean update(UserEntity user); /** * 根据主键 id 查询 */ public UserEntity load(int id); /** * 分页查询 */ public Map&lt;String, Object&gt; pageList(int pageNum, int pageSize);&#125; UserServiceImpl实现类 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.biubiu.mb.service.impl;import com.biubiu.mb.entity.UserEntity;import com.biubiu.mb.mapper.UserMapper;import com.biubiu.mb.service.UserService;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.HashMap;import java.util.List;import java.util.Map;/** * &lt;p&gt; * UserServiceImpl * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@Servicepublic class UserServiceImpl implements UserService &#123; @Resource private UserMapper userMapper; @Override public boolean insert(UserEntity user) &#123; // valid if (user == null) &#123; throw new RuntimeException(&quot;必要参数缺失&quot;); &#125; int insert = userMapper.insert(user); return insert &gt; 0; &#125; @Override public boolean delete(int id) &#123; int ret = userMapper.delete(id); return ret &gt; 0; &#125; @Override public boolean update(UserEntity user) &#123; int ret = userMapper.update(user); return ret &gt; 0; &#125; @Override public UserEntity load(int id) &#123; return userMapper.load(id); &#125; @Override public Map&lt;String, Object&gt; pageList(int pageNum, int pageSize) &#123; List&lt;UserEntity&gt; pageList = userMapper.pageList(pageNum, pageSize); int totalCount = userMapper.pageListCount(pageNum, pageSize); // result Map&lt;String, Object&gt; result = new HashMap&lt;String, Object&gt;(); result.put(&quot;pageList&quot;, pageList); result.put(&quot;totalCount&quot;, totalCount); return result; &#125;&#125; UserController 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.biubiu.mb.controller;import com.biubiu.mb.entity.UserEntity;import com.biubiu.mb.service.UserService;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import java.util.Map;/** * &lt;p&gt; * UserController * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@RestController@RequestMapping(&quot;/api/users&quot;)public class UserController &#123; @Resource private UserService userService; /** * 新增 */ @RequestMapping(&quot;/insert&quot;) public Object insert(UserEntity user) &#123; return userService.insert(user); &#125; /** * 刪除 */ @RequestMapping(&quot;/delete&quot;) public Object delete(int id) &#123; return userService.delete(id); &#125; /** * 更新 */ @RequestMapping(&quot;/update&quot;) public Object update(UserEntity user) &#123; return userService.update(user); &#125; /** * 查询 根据主键 id 查询 */ @RequestMapping(&quot;/load&quot;) public Object load(int id) &#123; return userService.load(id); &#125; /** * 查询 分页查询 */ @RequestMapping(&quot;/pageList&quot;) public Map&lt;String, Object&gt; pageList(@RequestParam(required = false, defaultValue = &quot;0&quot;) int pageNum, @RequestParam(required = false, defaultValue = &quot;10&quot;) int pageSize) &#123; return userService.pageList(pageNum, pageSize); &#125;&#125; 配置数据库连接信息上面写了一系列代码，唉，差点累死了，接下来轻松多了！ 我们写了一些列类，下面开始连接数据库，以及MyBatis的xml文件位置。注意修改数据库连接字符串以及用户名密码！ application.properties 1234567spring.datasource.url=jdbc:mysql://127.0.0.1:3306/biubiu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=truespring.datasource.driver-class-name=com.mysql.cj.jdbc.Driverspring.datasource.username=rootspring.datasource.password=root#MyBatis的xml文件，UserMapper.xmlmybatis.mapper-locations=classpath:mapper/*Mapper.xml 最后一步，在配置下mapper接口扫描，在启动类上加上一个注解@MapperScan(&quot;com.biubiu.mb.mapper&quot;) 123456789101112131415161718192021222324package com.biubiu.mb;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * &lt;p&gt; * MybatisApplication * &lt;/p&gt; * * @author biubiu * @since 2021/8/11 */@MapperScan(&quot;com.biubiu.mb.mapper&quot;)@SpringBootApplicationpublic class MyBatisApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(MyBatisApplication.class, args); &#125;&#125; 开始测试费了九牛二虎之力，终于到了验收成果的时候，有些小激动，废话不多说，开始干！ 打开postman神器，开始一个一个测试我们的增删改查 查询10007的用户 http://localhost:8080/api/users/load?id=10007 分页查询 http://localhost:8080/api/users/pageList?pageNum=0&amp;pageSize=5 插入一个人 好家伙看起来成功了，我们查一下数据库，果真成功了 成功了，那我再用接口查一把 修改下这个人 数据库看眼，是否成功 删除把 问题排除由于我写的时候太粗心把好几个单词打错了，导致了几个Bug…要细心细心细心呀！！！ 错误1pagenum小写了，和接口参数里对不上也会报错 错误2自动生成Id我全都写成了id，这里应该是UserEntity里的UserId和数据库字段user_id 错误3也是和UserEntity里的UserId不对应造成的","categories":[],"tags":[]},{"title":"SpringBoot系列（一）-Web入门篇","slug":"SpringBoot系列（一）-Web入门篇","date":"2021-08-10T03:39:52.000Z","updated":"2021-08-10T12:12:14.635Z","comments":true,"path":"2021/08/10/SpringBoot系列（一）-Web入门篇/","link":"","permalink":"https://baijq.github.io/2021/08/10/SpringBoot%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89-Web%E5%85%A5%E9%97%A8%E7%AF%87/","excerpt":"SpringBoot系列（一）-Web入门篇SpringBoot可以轻松创建独立的，生产级的基于Spring的应用程序，SpringBoot对周边框架的精简和整合，实现自动装配！这篇主要是SpringBoot入门的HelloWorld!","text":"SpringBoot系列（一）-Web入门篇SpringBoot可以轻松创建独立的，生产级的基于Spring的应用程序，SpringBoot对周边框架的精简和整合，实现自动装配！这篇主要是SpringBoot入门的HelloWorld! 环境准备JDK 1.8Maven 3.6.3IDEA 备注：maven可以设置下阿里云镜像，下载速度会很快 1234567&lt;!-- 阿里云镜像 --&gt;&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; 创建项目此系列我打算使用一个父级项目springboot-demo，然后下面建立各个子项目的方式来创建项目。 IDAE：file -&gt; new -&gt; project 选择项目名称，项目路径，等等 选择版本号，选择Web环境的依赖 项目结构如图，删除没用的文件，因为本项目是父项目，所以src也删了，改一下父pom.xml文件 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--项目坐标--&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!--SpringBoot父依赖--&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.5.3&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;!--属性设置--&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--这个Web依赖也删掉，在各自的子模块引入--&gt; &lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; --&gt; &lt;/dependencies&gt; &lt;!--maven打包插件也删掉，在各自的子模块引入--&gt; &lt;!-- &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; --&gt;&lt;/project&gt; 好，继续子项目创建，右键项目，new -&gt; module 这里选择Maven项目就行 创建完成后，再看看项目结构 可以看到父级pom.xml下多了module模块，这个表示子模块的意思 这里我们把项目搭建完毕了，我们改下子模块springboot-web-demo的pom.xml如下 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt; &lt;groupId&gt;com.biubiu&lt;/groupId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;artifactId&gt;springboot-web-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--maven打包插件--&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 编写代码 项目结构 注意，application.properties是空的，可以不加 启动类 WebApplicationo.java 12345678910111213141516/** * &lt;p&gt; * WebApplication * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/10 */@SpringBootApplicationpublic class WebApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(WebApplication.class, args); &#125;&#125; HelloController.java 1234567891011121314151617/** * &lt;p&gt; * HelloController * &lt;/p&gt; * * @author wbbaijq * @since 2021/8/10 */@RestControllerpublic class HelloController &#123; @GetMapping(&quot;/hello&quot;) public String hello() &#123; return &quot;hello spring-boot!!!&quot;; &#125;&#125; 启动项目：日志如下说明成功 1234......2021-08-10 15:42:37.586 INFO 9444 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1160 ms2021-08-10 15:42:38.037 INFO 9444 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;2021-08-10 15:42:38.051 INFO 9444 --- [ main] com.biubiu.web.WebApplication : Started WebApplication in 2.3 seconds (JVM running for 3.947) 浏览器输入 http://localhost:8080/hello测试 注意事项 SpringBoot内嵌了Tomcat容器，所以不需要外部Tomcat容器 思考点高深的东西，SpringBoot自动装配原理是啥？","categories":[],"tags":[]}],"categories":[],"tags":[]}